package wt.cn.com.wt9.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEARTRATE_DATA".
*/
public class HeartrateDataDao extends AbstractDao<HeartrateData, Void> {

    public static final String TABLENAME = "HEARTRATE_DATA";

    /**
     * Properties of entity HeartrateData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", false, "_ID");
        public final static Property ServerID = new Property(1, String.class, "serverID", false, "SERVER_ID");
        public final static Property HeartrateCout = new Property(2, Integer.class, "heartrateCout", false, "HEARTRATE_COUT");
        public final static Property TimeMillis = new Property(3, Long.class, "timeMillis", false, "TIME_MILLIS");
        public final static Property DateStr = new Property(4, String.class, "dateStr", false, "DATE_STR");
        public final static Property OptionType = new Property(5, Integer.class, "optionType", false, "OPTION_TYPE");
        public final static Property Upload = new Property(6, Boolean.class, "upload", false, "UPLOAD");
        public final static Property Userid = new Property(7, String.class, "userid", false, "USERID");
    }


    public HeartrateDataDao(DaoConfig config) {
        super(config);
    }
    
    public HeartrateDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEARTRATE_DATA\" (" + //
                "\"_ID\" INTEGER," + // 0: _id
                "\"SERVER_ID\" TEXT," + // 1: serverID
                "\"HEARTRATE_COUT\" INTEGER," + // 2: heartrateCout
                "\"TIME_MILLIS\" INTEGER," + // 3: timeMillis
                "\"DATE_STR\" TEXT," + // 4: dateStr
                "\"OPTION_TYPE\" INTEGER," + // 5: optionType
                "\"UPLOAD\" INTEGER," + // 6: upload
                "\"USERID\" TEXT);"); // 7: userid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEARTRATE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HeartrateData entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String serverID = entity.getServerID();
        if (serverID != null) {
            stmt.bindString(2, serverID);
        }
 
        Integer heartrateCout = entity.getHeartrateCout();
        if (heartrateCout != null) {
            stmt.bindLong(3, heartrateCout);
        }
 
        Long timeMillis = entity.getTimeMillis();
        if (timeMillis != null) {
            stmt.bindLong(4, timeMillis);
        }
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(5, dateStr);
        }
 
        Integer optionType = entity.getOptionType();
        if (optionType != null) {
            stmt.bindLong(6, optionType);
        }
 
        Boolean upload = entity.getUpload();
        if (upload != null) {
            stmt.bindLong(7, upload ? 1L: 0L);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(8, userid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HeartrateData entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String serverID = entity.getServerID();
        if (serverID != null) {
            stmt.bindString(2, serverID);
        }
 
        Integer heartrateCout = entity.getHeartrateCout();
        if (heartrateCout != null) {
            stmt.bindLong(3, heartrateCout);
        }
 
        Long timeMillis = entity.getTimeMillis();
        if (timeMillis != null) {
            stmt.bindLong(4, timeMillis);
        }
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(5, dateStr);
        }
 
        Integer optionType = entity.getOptionType();
        if (optionType != null) {
            stmt.bindLong(6, optionType);
        }
 
        Boolean upload = entity.getUpload();
        if (upload != null) {
            stmt.bindLong(7, upload ? 1L: 0L);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(8, userid);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HeartrateData readEntity(Cursor cursor, int offset) {
        HeartrateData entity = new HeartrateData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serverID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // heartrateCout
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // timeMillis
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dateStr
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // optionType
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // upload
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // userid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HeartrateData entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeartrateCout(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTimeMillis(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDateStr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOptionType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUpload(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setUserid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HeartrateData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HeartrateData entity) {
        return null;
    }

    @Override
    public boolean hasKey(HeartrateData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
